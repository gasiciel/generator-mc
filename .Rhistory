# zadanie 1
generator_kongruencyjny <- function(a,m,n){
s_n = c(1)
for (i in 1:n){
k <- s_n[length(s_n)]
s_n <- c(s_n, (a*k) %% m)}
x_n <- s_n/m
return(x_n[-1])
}
x = generator_kongruencyjny(19,37,50)
y = generator_kongruencyjny(50,215,50)
okres <- function(a, m) {
s_n = 1
wygenerowane = c(s_n)
okres = 1
while(TRUE) {
s_n <- (a * s_n) %% m
if(s_n %in% wygenerowane) {
break
} else {
wygenerowane <- c(wygenerowane, s_n)
okres <- okres + 1
}
}
return(okres)
}
okres_pierwszy <- okres(19, 37)
cat("Okres pierwszego generatora:", okres_pierwszy)
plot(x, rep(1, 50), xlim = c(0, 1), ylim = c(0,2), xlab = "Wartość", ylab = "", pch = 20, yaxt = "n", main = "Punkty na odcinku jednostkowym")
abline(h = 1, col="red")
axis(2, at = 1, labels = "0", las = 1)
hist(x, col="blue")
sto_gen <- generator_kongruencyjny(19,37,100)
x <- sto_gen[seq(1, 100, by = 2)]
y <- sto_gen[seq(2, 100, by = 2)]
plot(x, y, ylim = c(0,1))
title("Punkty na kwadracie jednostkowym")
# zadanie 2
x <- runif(50)
y <- runif(50)
plot(x,y)
title("Punkty na kwadracie jednostkowym standardowy generator")
abline(h = 1/3,v=1/3,col="red")
abline(h = 2/3,v=2/3,col="red")
#Aby za każdym razem otrzymywać ten sam ciąg 50-ciu par liczb pseudolosowych, należy zainicjować generator liczb pseudolosowych tym samym ziarnem.
set.seed(123)
#Powtarzalność nie jest sprzeczna z ideą symulacji pseudolosowych. Wręcz przeciwnie, jest to jedna z pożądanych cech generatorów liczb pseudolosowych. Generatory liczb pseudolosowych są deterministyczne, co oznacza, że dla tego samego ziarna zawsze wygenerują ten sam ciąg liczb. To pozwala na replikację eksperymentów i testów, co jest kluczowe dla naukowego podejścia do badań i rozwoju oprogramowania.
#Idea symulacji pseudolosowych polega na tym, że choć liczby generowane przez te algorytmy są deterministyczne (i w tym sensie nie są "prawdziwie" losowe), ich właściwości statystyczne sprawiają, że w wielu zastosowaniach są one wystarczająco "dobre" do naśladowania losowości. Możliwość replikacji wyników dzięki użyciu stałego ziarna jest więc nie tyle ograniczeniem, ile zaletą tych systemów.
# zadanie 3
gen_0_1 <- function(p) {
x <- runif(1)
if(x <= p){
return(1)
}
else{
return(0)
}
}
gen <- gen_0_1(1/3)
generator_dwupunktowy <- function(n,p){
x <- c(1)
for (i in 1:n)
x[i] <- gen_0_1(p)
return(x)
}
rozklad_dwupunktowy <- generator_dwupunktowy(10,1/2)
rozklad_dwupunktowy
generator_dwumianowy <- function(n, m, p) {
x <- c(1)
for (i in 1:n) {
u = runif(m);
print(u)
b = (u < p);
x[i] = sum(b)
}
return(x)
}
rozklad_dwumianowy <- generator_dwumianowy(1000,10,0.5)
hist(rozklad_dwumianowy, main = "Rozkład dwumianowy", xlab = "Liczba sukcesów", ylab = "Częstość", col = "blue", border = "white")
generator_poissona <- function(n,lambda) {
tab <- c(0)
for(i in 1:n){
L <- exp(-lambda)
k <- 0
iloczyn_p <- 1
while(TRUE) {
u <- runif(1)
iloczyn_p <- iloczyn_p * u
if(iloczyn_p >= L){
k <- k + 1
} else{
tab[i] <- k
break
}
}
}
return(tab)
}
rozklad_poissona <- generator_poissona(100,5)
hist(rozklad_poissona, main = "Rozkład Poissona", xlab = "Liczba sukcesów", ylab = "Częstość", col = "blue", border = "white")
